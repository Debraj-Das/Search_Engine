DFS                    

https://codeforces.com/problemset/problem/1044/F

data structures

2700

Let T be a tree on n vertices. Consider a graph G_0, initially equal to T. You are given a sequence of q updates, where the i-th update is given as a pair of two distinct integers u_i and v_i. For every i from 1 to q, we define the graph G_i as follows:   If G_{i-1} contains an edge \{u_i, v_i\}, then remove this edge to form G_i.  Otherwise, add this edge to G_{i-1} to form G_i.  Formally, G_i := G_{i-1} \triangle \{\{u_i, v_i\}\} where \triangle denotes the set symmetric difference. Furthermore, it is guaranteed that T is always a subgraph of G_i. In other words, an update never removes an edge of T.Consider a connected graph H and run a depth-first search on it. One can see that the tree edges (i.e. the edges leading to a not yet visited vertex at the time of traversal) form a spanning tree of the graph H. This spanning tree is not generally fixed for a particular graph — it depends on the starting vertex, and on the order in which the neighbors of each vertex are traversed. We call vertex w good if one can order the neighbors of each vertex in such a way that the depth-first search started from w produces T as the spanning tree. For every i from 1 to q, find and report the number of good vertices.