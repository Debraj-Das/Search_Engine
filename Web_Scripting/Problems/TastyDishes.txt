Tasty Dishes                    

https://codeforces.com/problemset/problem/1540/E

math

3500

Note that the memory limit is unusual.There are n chefs numbered 1, 2, \ldots, n that must prepare dishes for a king. Chef i has skill i and initially has a dish of tastiness a_i where |a_i| \leq i. Each chef has a list of other chefs that he is allowed to copy from. To stop chefs from learning bad habits, the king makes sure that chef i can only copy from chefs of larger skill.There are a sequence of days that pass during which the chefs can work on their dish. During each day, there are two stages during which a chef can change the tastiness of their dish.   At the beginning of each day, each chef can choose to work (or not work) on their own dish, thereby multiplying the tastiness of their dish of their skill (a_i := i \cdot a_i) (or doing nothing). After all chefs (who wanted) worked on their own dishes, each start observing the other chefs. In particular, for each chef j on chef i's list, chef i can choose to copy (or not copy) j's dish, thereby adding the tastiness of the j's dish to i's dish (a_i := a_i + a_j) (or doing nothing). It can be assumed that all copying occurs simultaneously. Namely, if chef i chooses to copy from chef j he will copy the tastiness of chef j's dish at the end of stage 1.All chefs work to maximize the tastiness of their own dish in order to please the king.Finally, you are given q queries. Each query is one of two types.  1 k l r — find the sum of tastiness a_l, a_{l+1}, \ldots, a_{r} after the k-th day. Because this value can be large, find it modulo 10^9 + 7.  2 i x — the king adds x tastiness to the i-th chef's dish before the 1-st day begins (a_i := a_i + x). Note that, because the king wants to see tastier dishes, he only adds positive tastiness (x > 0). Note that queries of type 1 are independent of each all other queries. Specifically, each query of type 1 is a scenario and does not change the initial tastiness a_i of any dish for future queries. Note that queries of type 2 are cumulative and only change the initial tastiness a_i of a dish. See notes for an example of queries.