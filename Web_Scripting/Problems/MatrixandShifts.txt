Matrix and Shifts                    

https://codeforces.com/problemset/problem/1660/E

brute force

1600

You are given a binary matrix A of size n \times n. Rows are numbered from top to bottom from 1 to n, columns are numbered from left to right from 1 to n. The element located at the intersection of row i and column j is called A_{ij}. Consider a set of 4 operations:  Cyclically shift all rows up. The row with index i will be written in place of the row i-1 (2 \le i \le n), the row with index 1 will be written in place of the row n.  Cyclically shift all rows down. The row with index i will be written in place of the row i+1 (1 \le i \le n - 1), the row with index n will be written in place of the row 1.  Cyclically shift all columns to the left. The column with index j will be written in place of the column j-1 (2 \le j \le n), the column with index 1 will be written in place of the column n.  Cyclically shift all columns to the right. The column with index j will be written in place of the column j+1 (1 \le j \le n - 1), the column with index n will be written in place of the column 1.   The 3 \times 3 matrix is shown on the left before the 3-rd operation is applied to it, on the right — after. You can perform an arbitrary (possibly zero) number of operations on the matrix; the operations can be performed in any order.After that, you can perform an arbitrary (possibly zero) number of new xor-operations:  Select any element A_{ij} and assign it with new value A_{ij} \oplus 1. In other words, the value of (A_{ij} + 1) \bmod 2 will have to be written into element A_{ij}. Each application of this xor-operation costs one burl. Note that the 4 shift operations — are free. These 4 operations can only be performed before xor-operations are performed.Output the minimum number of burles you would have to pay to make the A matrix unitary. A unitary matrix is a matrix with ones on the main diagonal and the rest of its elements are zeros (that is, A_{ij} = 1 if i = j and A_{ij} = 0 otherwise).