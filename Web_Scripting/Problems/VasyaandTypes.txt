Vasya and Types                    

httpscodeforcescomproblemsetproblem87B

implementation

1800

Programmer Vasya is studying a new programming language K The K language resembles the languages of the C family in its syntax However it is more powerful which is why the rules of the actual Clike languages are unapplicable to it To fully understand the statement please read the languages description below carefully and follow it and not the similar rules in real programming languagesThere is a very powerful system of pointers on K  you can add an asterisk to the right of the existing type X  that will result in new type X That is called pointerdefinition operation Also there is the operation that does the opposite  to any type of X which is a pointer you can add an ampersand  that will result in a type X to which refers X That is called a dereference operationThe K language has only two basic data types  void and errtype Also the language has operators typedef and typeof The operator typedef A B defines a new data type B which is equivalent to A A can have asterisks and ampersands and B cannot have them For example the operator typedef void ptptvoid will create a new type ptptvoid that can be used as void The operator typeof A returns type of A brought to void that is returns the type void equivalent to it with the necessary number of asterisks the number can possibly be zero That is having defined the ptptvoid type as shown above the typeof ptptvoid operator will return voidAn attempt of dereferencing of the void type will lead to an error to a special data type errtype For errtype the following equation holds true errtypeerrtypeerrtype An attempt to use the data type that hasnt been defined before that will also lead to the errtypeUsing typedef we can define one type several times Of all the definitions only the last one is valid However all the types that have been defined earlier using this type do not changeLet us also note that the dereference operation has the lower priority that the pointer operation in other words T is always equal to TNote that the operators are executed consecutively one by one If we have two operators typedef void a and typedef a b then at first a becomes errtype and after that b becomes errtype  errtype but not void  void see sample 2Vasya does not yet fully understand this powerful technology thats why he asked you to help him Write a program that analyzes these operators 