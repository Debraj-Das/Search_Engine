Move and Swap                    

https://codeforces.com/problemset/problem/1485/E

dfs and similar

2500

You are given n - 1 integers a_2, \dots, a_n and a tree with n vertices rooted at vertex 1. The leaves are all at the same distance d from the root. Recall that a tree is a connected undirected graph without cycles. The distance between two vertices is the number of edges on the simple path between them. All non-root vertices with degree 1 are leaves. If vertices s and f are connected by an edge and the distance of f from the root is greater than the distance of s from the root, then f is called a child of s.Initially, there are a red coin and a blue coin on the vertex 1. Let r be the vertex where the red coin is and let b be the vertex where the blue coin is. You should make d moves. A move consists of three steps:   Move the red coin to any child of r.  Move the blue coin to any vertex b' such that dist(1, b') = dist(1, b) + 1. Here dist(x, y) indicates the length of the simple path between x and y. Note that b and b' are not necessarily connected by an edge.  You can optionally swap the two coins (or skip this step). Note that r and b can be equal at any time, and there is no number written on the root.After each move, you gain |a_r - a_b| points. What's the maximum number of points you can gain after d moves?