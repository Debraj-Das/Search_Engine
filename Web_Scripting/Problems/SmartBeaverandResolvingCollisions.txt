Smart Beaver and Resolving Collisions                    

httpscodeforcescomproblemsetproblem178C3



2000

The Smart Beaver from ABBYY has a lot of hobbies One of them is constructing efficient hash tables One of the most serious problems in hash tables is resolving collisions The Beaver is interested in this problem very much and he decided to explore it in detailWe assume that the hash table consists of h cells numbered from 0 to h1 Objects are added to and removed from it Every object has its own unique identifier In addition every object has a corresponding hash value  an integer between 0 and h1 inclusive When an object is added to the table if the cell corresponding to the hash value of the object is free then this object goes there If the cell is already occupied by another object there is a collision When an object is deleted from the table the cell which it occupied becomes emptyThe Smart Beaver has recently learned about the method of linear probing to resolve collisions It is as follows Lets say that the hash value for the added object equals t and cell t of the table is already occupied Then we try to add this object to cell tmmodh If it is also occupied then we try cell t2mmodh then cell t3mmodh and so on Note that in some cases its possible that the new object can not be added to the table It is guaranteed that the input for this problem doesnt contain such situationsThe operation amodb means that we take the remainder of the division of number a by number bThis technique immediately seemed very inoptimal to the Beaver and he decided to assess its inefficiency So you are given a sequence of operations each of which is either an addition of an object to the table or a deletion of an object from the table When adding a new object a sequence of calls to the table is performed Calls to occupied cells are called dummy In other words if the result of the algorithm described above is the object being added to cell timmodh i0 then exactly i dummy calls have been performedYour task is to calculate the total number of dummy calls to the table for the given sequence of additions and deletions When an object is deleted from the table assume that no dummy calls are performed The table is empty before performing the operations that is initially it doesnt contain any objects