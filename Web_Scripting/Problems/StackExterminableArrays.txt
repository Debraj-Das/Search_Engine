Stack Exterminable Arrays                    

https://codeforces.com/problemset/problem/1223/F

data structures

2600

Let's look at the following process: initially you have an empty stack and an array s of the length l. You are trying to push array elements to the stack in the order s_1, s_2, s_3, \dots s_{l}. Moreover, if the stack is empty or the element at the top of this stack is not equal to the current element, then you just push the current element to the top of the stack. Otherwise, you don't push the current element to the stack and, moreover, pop the top element of the stack. If after this process the stack remains empty, the array s is considered stack exterminable.There are samples of stack exterminable arrays:   [1, 1];  [2, 1, 1, 2];  [1, 1, 2, 2];  [1, 3, 3, 1, 2, 2];  [3, 1, 3, 3, 1, 3];  [3, 3, 3, 3, 3, 3];  [5, 1, 2, 2, 1, 4, 4, 5]; Let's consider the changing of stack more details if s = [5, 1, 2, 2, 1, 4, 4, 5] (the top of stack is highlighted).   after pushing s_1 = 5 the stack turn into [\textbf{5}];  after pushing s_2 = 1 the stack turn into [5, \textbf{1}];  after pushing s_3 = 2 the stack turn into [5, 1, \textbf{2}];  after pushing s_4 = 2 the stack turn into [5, \textbf{1}];  after pushing s_5 = 1 the stack turn into [\textbf{5}];  after pushing s_6 = 4 the stack turn into [5, \textbf{4}];  after pushing s_7 = 4 the stack turn into [\textbf{5}];  after pushing s_8 = 5 the stack is empty. You are given an array a_1, a_2, \ldots, a_n. You have to calculate the number of its subarrays which are stack exterminable.Note, that you have to answer q independent queries.